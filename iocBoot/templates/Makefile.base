ifndef IOC_TOP
$(error IOC_TOP is not set)
endif
ifndef PROJECT_NAME
$(error PROJECT_NAME is not set)
endif

ifndef PLC
$(error PLC is not set)
endif

SHELL = /bin/bash

# Set defaults:
PYTMC_OPTS ?=
PYTMC_DB_OPTS ?=
PREFIX ?=
HOST_ARCH ?= rhel7-x86_64
BINARY_PATH ?= $(IOC_TOP)/bin/$(HOST_ARCH)/adsIoc
DBD_PATH ?= $(IOC_TOP)/dbd/adsIoc.dbd
PROJECT_PATH ?= $(IOC_INSTANCE_PATH)/../../$(PROJECT_NAME)/$(PROJECT_NAME).tsproj
TEMPLATE_PATH ?= $(IOC_TOP)/iocBoot/templates
STCMD_TEMPLATE ?= st.cmd.template
IOC_NAME := $(shell basename "$(IOC_INSTANCE_PATH)")
PRODUCTION_IOC ?= 0
PYTMC_MIN_VERSION ?= 2.7.7

ifeq ($(PRODUCTION_IOC), 1)
	IOC_DATA_PATH ?= /reg/d/iocData
else
	IOC_DATA_PATH ?= $(HOME)/iocData
endif

ARCHIVE_PATH ?= $(IOC_DATA_PATH)/$(IOC_NAME)/archive
BUILD_PATH ?= $(IOC_INSTANCE_PATH)/.pytmc_build
DB_PARAMETERS ?= 'PREFIX=$(PREFIX):,IOCNAME=$$(IOC),IOC=$$(IOC)'
# abspath is failing with spaces - falling back to Python here:
pyabspath = $(shell python -c "import os, sys; print(os.path.abspath(os.path.expanduser(sys.argv[1])))" "$(1)" )

all: build paths clean

help:
	@echo "Available commands:"
	@echo "    all:      builds the IOC and cleans the temporary files"
	@echo "    build:    builds the st.cmd, databases, envPaths, etc."
	@echo "    clean:    cleans temporary pytmc files in $(BUILD_PATH)"
	@echo "    paths:    make relevant directories (autosave, etc.)"
	@echo "    lint:     lint the pragmas"
	@echo "    lintdb:   lint the generated .db file against the IOC dbd"
	@echo "    summary:  tool shortcut - display a PLC project summary"
	@echo "    code:     tool shortcut - display a PLC code summary"
	@echo "    outline:  tool shortcut - display an outline of tsproj, tmc, etc."
	@echo "    debug:    tool shortcut - display a debug GUI for chains and records"
	@echo "    types:    tool shortcut - display a debug GUI for PLC-defined data types"
	@echo ""
	@echo "Note that all commands support passing additional arguments to pytmc"
	@echo "through the PYTMC_OPTS environment variable.  For example:"
	@echo "    $ make summary PYTMC_OPTS=--help"
	@exit 1


_check_versions:
	@python -c "import sys, pytmc, distutils.version; print('* Found pytmc v', pytmc.__version__); sys.exit(not (distutils.version.LooseVersion(pytmc.__version__) >= distutils.version.LooseVersion('$(PYTMC_MIN_VERSION)')))" || (echo "A newer pytmc is required: >= $(PYTMC_MIN_VERSION)" && exit 1)

st.cmd: _check_versions
	@echo "Executing pytmc stcmd: creating st.cmd..."
	cd "$(BUILD_PATH)" && \
		pytmc stcmd \
		--name "$(IOC_NAME)" \
		--plc "$(PLC)" \
		--template-path "$(TEMPLATE_PATH)" \
		--template "$(STCMD_TEMPLATE)" \
		--hashbang "$(BINARY_PATH)" \
		--only-motor \
		-p "$(PREFIX)" \
		$(PYTMC_OPTS) \
		"$(call pyabspath,$(PROJECT_PATH))" > st.cmd

db: _check_versions
	@echo "Executing pytmc db: creating $(PLC).db and $(PLC).archive..."
	cd "$(BUILD_PATH)" && \
		pytmc db \
		--plc "$(PLC)" \
		$(PYTMC_DB_OPTS) \
		"$(call pyabspath,$(PROJECT_PATH))" \
		"$(PLC).db"

envPaths:
	@echo "* Copying envPaths and fixing IOC_TOP..."
	@cat "$(TEMPLATE_PATH)"/envPaths | \
		sed -e 's/^epicsEnvSet("IOC",.*)/epicsEnvSet("IOC","$(IOC_NAME)")/' \
		> "$(IOC_INSTANCE_PATH)"/envPaths
	@echo 'epicsEnvSet("IOC_TOP", "$(IOC_INSTANCE_PATH)")' >> "$(IOC_INSTANCE_PATH)"/envPaths
	@echo 'epicsEnvSet("IOC_DATA", "$(IOC_DATA_PATH)")' >> "$(IOC_INSTANCE_PATH)"/envPaths

install:
	@echo ""
	@echo "* Copying st.cmd and databases..."
	@ if [ -f "$(IOC_INSTANCE_PATH)"/st.cmd ]; then \
		echo "* Changing permissions on the old st.cmd..."; \
		chmod +w "$(IOC_INSTANCE_PATH)/st.cmd"; \
	fi

	@if test -n "`shopt -s nullglob; echo "$(BUILD_PATH)"/*.db`"; then \
		echo "* Found database files to install; creating load_plc_databases.cmd..."; \
		find "$(BUILD_PATH)" -name '*.db' -print0 | \
			PREFIX=$(PREFIX) DELIM=":" DB_PARAMETERS=$(DB_PARAMETERS) \
			python $(TEMPLATE_PATH)/dbloads.py \
			> "$(BUILD_PATH)/load_plc_databases.cmd"; \
		\
		for filename in "$(BUILD_PATH)"/*.db; \
		do \
			echo "* Installing: $$(basename $$filename)"; \
			install -p -m 0444 "$$filename" "$(IOC_INSTANCE_PATH)"; \
		done \
	else \
		touch "$(BUILD_PATH)/load_plc_databases.cmd"; \
	fi

	@echo "* Installing: st.cmd"
	install -p -m 0555 "$(BUILD_PATH)/st.cmd" "$(IOC_INSTANCE_PATH)";

	@echo "* Installing: load_plc_databases.cmd"
	install -p -m 0444 "$(BUILD_PATH)/load_plc_databases.cmd" "$(IOC_INSTANCE_PATH)";

	@shopt -s nullglob; \
	for filename in "$(BUILD_PATH)"/*.archive; \
	do \
		if [ -d "$(ARCHIVE_PATH)" ]; then \
			echo "* Installing archive file: $$(basename $$filename)"; \
			install -p -m 0444 "$$filename" "$(ARCHIVE_PATH)"; \
		else \
			echo "* Warning: ${ARCHIVE_PATH} does not exist;" \
				"copying archive file to the IOC instance path."; \
			install -p -m 0444 "$$filename" "$(IOC_INSTANCE_PATH)"; \
		fi; \
	done

	@cd "$(IOC_INSTANCE_PATH)"


build:
	@echo "-----------------------------------------------------------"
	@echo "Build path: $(BUILD_PATH)"
	@echo "PLC: $(PLC)"
	@echo "IOC name: $(IOC_NAME)"
	@echo "PYTMC_OPTS: $(PYTMC_OPTS)"
	@echo "PROJECT_PATH: $(PROJECT_PATH)"
	@echo "Absolute project path: " $(call pyabspath,$(PROJECT_PATH))
	@echo "-----------------------------------------------------------"
	@echo ""
	@echo ""

	mkdir -p "$(BUILD_PATH)"

	@$(MAKE) st.cmd
	@$(MAKE) db
	@$(MAKE) envPaths
	@$(MAKE) install

	@echo ""
	@echo "Build complete."


clean:
	@echo ""
	@echo "* Cleaning..."
	@if [ -d "$(BUILD_PATH)" ]; then \
		shopt -s nullglob; \
		rm -f "$(BUILD_PATH)"/st.cmd "$(BUILD_PATH)"/load_plc_databases.cmd \
			  "$(BUILD_PATH)"/*.db "$(BUILD_PATH)"/*.archive; \
		rmdir "$(BUILD_PATH)"; \
	fi
	@echo "Done"


paths:
	@echo "Creating IOC data directory"
	install --mode 0775 --group ps-ioc --directory $(IOC_DATA_PATH)/$(IOC_NAME)/{iocInfo,archive,logs,autosave}
	@echo "Creating autosave files directory"
	install --mode 0775 --group ps-ioc --directory $(IOC_INSTANCE_PATH)/autosave


lint: _check_versions
	@echo "Linting the pytmc pragmas. Use \`make $@ PYTMC_OPTS=...\` to pass args to pytmc." > /dev/stderr
	pytmc pragmalint "$(call pyabspath,$(PROJECT_PATH))" $(PYTMC_OPTS)


lintdb: _check_versions
	@echo "Linting the database file against the IOC dbd. Use \`make $@ PYTMC_OPTS=...\` to pass args to pytmc." > /dev/stderr
	pytmc db \
		--plc "$(PLC)" \
		--dbd "$(DBD_PATH)" \
		"$(call pyabspath,$(PROJECT_PATH))" > /dev/null


summary: _check_versions
	@echo "Generating a summary for the project. Use \`make $@ PYTMC_OPTS=...\` to pass args to pytmc." > /dev/stderr
	pytmc summary -a "$(call pyabspath,$(PROJECT_PATH))" $(PYTMC_OPTS)


code: _check_versions
	@echo "Generating a summary of the code. Use \`make $@ PYTMC_OPTS=...\` to pass args to pytmc." > /dev/stderr
	pytmc summary --plcs --code "$(call pyabspath,$(PROJECT_PATH))" $(PYTMC_OPTS)


outline: _check_versions
	@echo "Generating a project outline. Use \`make $@ PYTMC_OPTS=...\` to pass args to pytmc." > /dev/stderr
	pytmc summary --outline "$(call pyabspath,$(PROJECT_PATH))" $(PYTMC_OPTS)


debug: _check_versions
	@echo "Running the debug GUI. Use \`make $@ PYTMC_OPTS=...\` to pass args to pytmc." > /dev/stderr
	pytmc debug "$(call pyabspath,$(PROJECT_PATH))" $(PYTMC_OPTS)


types: _check_versions
	@echo "Running the data type debug GUI. Use \`make $@ PYTMC_OPTS=...\` to pass args to pytmc." > /dev/stderr
	pytmc types "$(call pyabspath,$(PROJECT_PATH))" $(PYTMC_OPTS)


.PHONY: all _check_versions st.cmd db envPaths install build clean paths lint lintdb summary code outline debug types
